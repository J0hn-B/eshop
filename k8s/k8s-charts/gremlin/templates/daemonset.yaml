apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "gremlin.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "gremlin.name" . }}
    helm.sh/chart: {{ include "gremlin.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    version: v1
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "gremlin.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "gremlin.name" . }}
        helm.sh/chart: {{ include "gremlin.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        version: v1
      {{- if .Values.gremlin.apparmor }}
      annotations:
        # Tell the Gremlin Daemon containers to launch in the unconfined
        container.apparmor.security.beta.kubernetes.io/{{ .Chart.Name }}: {{ .Values.gremlin.apparmor }}
      {{- end }}
    spec:
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | trimSuffix "\n" | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | trimSuffix "\n" | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | trimSuffix "\n" | indent 8 }}
      {{- end }}
      hostPID: {{ .Values.gremlin.hostPID }}
      hostNetwork: {{ .Values.gremlin.hostNetwork }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        args: [ "daemon" ]
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          capabilities:
            add:
              - NET_ADMIN
              - SYS_BOOT
              - SYS_TIME
              - KILL
        env:
          - name: GREMLIN_TEAM_ID
            {{- /* If we aren't managing this secret and a teamID was supplied, assume teamID is not in the external secret */}}
            {{- if (and (not .Values.gremlin.secret.managed) (default .Values.gremlin.teamID .Values.gremlin.secret.teamID)) }}
            value: {{ default .Values.gremlin.teamID .Values.gremlin.secret.teamID | quote }}
            {{- else }}
            valueFrom:
              secretKeyRef:
                name:  {{ include "gremlin.secretName" . }}
                key: GREMLIN_TEAM_ID
            {{- end }}

          {{- if (eq (include "gremlin.secretType" .) "secret") }}
          - name: GREMLIN_TEAM_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ include "gremlin.secretName" . }}
                key: GREMLIN_TEAM_SECRET
          {{- else }}
          - name: GREMLIN_TEAM_CERTIFICATE_OR_FILE
            value: file:///var/lib/gremlin/cert/gremlin.cert
          - name: GREMLIN_TEAM_PRIVATE_KEY_OR_FILE
            value: file:///var/lib/gremlin/cert/gremlin.key
          {{- end }}
          - name: GREMLIN_IDENTIFIER
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: GREMLIN_CLIENT_TAGS
            value: {{ .Values.gremlin.client.tags }}
          - name: GREMLIN_DOCKER_IMAGE
            value: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        volumeMounts:
          - name: docker-sock
            mountPath: /var/run/docker.sock
          - name: gremlin-state
            mountPath: /var/lib/gremlin
          - name: gremlin-logs
            mountPath: /var/log/gremlin
          - name: shutdown-trigger
            mountPath: /sysrq
          {{- if (eq (include "gremlin.secretType" .) "certificate") }}
          - name: gremlin-cert
            mountPath: /var/lib/gremlin/cert
            readOnly: true
          {{- end }}
      volumes:
        # Gremlin uses the Docker socket to discover eligible containers to attack,
        # and to launch Gremlin sidecar containers
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        # The Gremlin daemon communicates with Gremlin sidecars via its state directory.
        # This should be shared with the Kubernetes host
        - name: gremlin-state
          hostPath:
            path: /var/lib/gremlin
        # The Gremlin daemon forwards logs from the Gremlin sidecars to the Gremlin control plane
        # These logs should be shared with the host
        - name: gremlin-logs
          hostPath:
            path: /var/log/gremlin
        # If you want to run shutdown attacks on the host, the Gremlin Daemon requires a /proc/sysrq-trigger:/sysrq mount
        - name: shutdown-trigger
          hostPath:
            path: /proc/sysrq-trigger
        {{- if (eq (include "gremlin.secretType" .) "certificate") }}
        - name: gremlin-cert
          secret:
            secretName: {{ include "gremlin.secretName" . }}
        {{- end }}
